{
  "templates": [
    {
      "label": "Preview first 5 rows",
      "sql": "SELECT * FROM fruit_prices_2022 LIMIT 5;",
      "category": "Relational Algebra"
    },
    {
      "label": "List fruit and form columns",
      "sql": "SELECT fruit, form FROM fruit_prices_2022;",
      "category": "Relational Algebra"
    },
    {
      "label": "Show distinct forms",
      "sql": "SELECT DISTINCT form FROM fruit_prices_2022;",
      "category": "Relational Algebra"
    },
    {
      "label": "Filter fruits with price > 2",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE retail_price > 2;",
      "category": "Relational Algebra"
    },
    {
      "label": "Fruits with yield < 0.7",
      "sql": "SELECT fruit FROM fruit_prices_2022 WHERE yield < 0.7;",
      "category": "Relational Algebra"
    },
    {
      "label": "Filter fresh fruits only",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE form = 'Fresh';",
      "category": "Relational Algebra"
    },
    {
      "label": "Fruits starting with A",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE fruit LIKE 'A%';",
      "category": "Relational Algebra"
    },
    {
      "label": "Cup-equivalent unit is NULL",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE cup_equivalent_unit IS NULL;",
      "category": "Relational Algebra"
    },
    {
      "label": "Show only fruit and form",
      "sql": "SELECT fruit, form FROM fruit_prices_2022;",
      "category": "Relational Algebra"
    },
    {
      "label": "Show unique price units",
      "sql": "SELECT DISTINCT retail_price_unit FROM fruit_prices_2022;",
      "category": "Relational Algebra"
    },
    {
      "label": "Rename price column using AS",
      "sql": "SELECT fruit, retail_price AS price FROM fruit_prices_2022;",
      "category": "Relational Algebra"
    },
    {
      "label": "Top 5 most expensive fruits",
      "sql": "SELECT * FROM fruit_prices_2022 ORDER BY retail_price DESC LIMIT 5;",
      "category": "Relational Algebra"
    },
    {
      "label": "5 cheapest fruits",
      "sql": "SELECT * FROM fruit_prices_2022 ORDER BY retail_price ASC LIMIT 5;",
      "category": "Relational Algebra"
    },
    {
      "label": "Average price by form",
      "sql": "SELECT form, AVG(retail_price) AS avg_price FROM fruit_prices_2022 GROUP BY form;",
      "category": "Relational Algebra"
    },
    {
      "label": "Count fruits per form",
      "sql": "SELECT form, COUNT(*) AS count FROM fruit_prices_2022 GROUP BY form;",
      "category": "Relational Algebra"
    },
    {
      "label": "Max price per form",
      "sql": "SELECT form, MAX(retail_price) AS max_price FROM fruit_prices_2022 GROUP BY form;",
      "category": "Relational Algebra"
    },
    {
      "label": "Min yield per form",
      "sql": "SELECT form, MIN(yield) AS min_yield FROM fruit_prices_2022 GROUP BY form;",
      "category": "Relational Algebra"
    },
    {
      "label": "Total cup-equivalent price by form",
      "sql": "SELECT form, SUM(cup_equiv_price) AS total_price FROM fruit_prices_2022 GROUP BY form;",
      "category": "Relational Algebra"
    },
    {
      "label": "Union: fruit and form names",
      "sql": "SELECT fruit FROM fruit_prices_2022 UNION SELECT form FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Union ALL: include duplicates",
      "sql": "SELECT fruit FROM fruit_prices_2022 UNION ALL SELECT form FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Intersection: fruit names as forms",
      "sql": "SELECT fruit FROM fruit_prices_2022 INTERSECT SELECT form FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Difference: fruits not in form",
      "sql": "SELECT fruit FROM fruit_prices_2022 EXCEPT SELECT form FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Distinct form types",
      "sql": "SELECT DISTINCT form FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Substring of fruit names",
      "sql": "SELECT DISTINCT SUBSTR(fruit, 1, 3) AS prefix FROM fruit_prices_2022;",
      "category": "Set Theory"
    },
    {
      "label": "Fruits with price > $3 using IN",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE fruit IN (SELECT fruit FROM fruit_prices_2022 WHERE retail_price > 3);",
      "category": "Set Theory"
    },
    {
      "label": "Fruit with max retail price",
      "sql": "SELECT fruit FROM fruit_prices_2022 WHERE retail_price = (SELECT MAX(retail_price) FROM fruit_prices_2022);",
      "category": "Relational Calculus"
    },
    {
      "label": "Fruit with min yield",
      "sql": "SELECT fruit FROM fruit_prices_2022 WHERE yield = (SELECT MIN(yield) FROM fruit_prices_2022);",
      "category": "Relational Calculus"
    },
    {
      "label": "EXISTS: cup size > 1.0",
      "sql": "SELECT fruit FROM fruit_prices_2022 WHERE EXISTS (SELECT 1 FROM fruit_prices_2022 WHERE cup_equiv_size > 1.0 AND fruit = fruit_prices_2022.fruit);",
      "category": "Relational Calculus"
    },
    {
      "label": "Fruits above average price",
      "sql": "SELECT fruit, retail_price FROM fruit_prices_2022 WHERE retail_price > (SELECT AVG(retail_price) FROM fruit_prices_2022);",
      "category": "Relational Calculus"
    },
    {
      "label": "NOT EXISTS: missing cup unit",
      "sql": "SELECT fruit FROM fruit_prices_2022 WHERE NOT EXISTS (SELECT 1 FROM fruit_prices_2022 WHERE cup_equivalent_unit IS NULL);",
      "category": "Relational Calculus"
    },
    {
      "label": "Form is Fresh AND price < 2",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE form = 'Fresh' AND retail_price < 2;",
      "category": "Relational Calculus"
    },
    {
      "label": "Fruits matching 'apples'",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE LOWER(fruit) = 'apples';",
      "category": "Relational Calculus"
    },
    {
      "label": "Fruits BETWEEN $1 and $3",
      "sql": "SELECT fruit, retail_price FROM fruit_prices_2022 WHERE retail_price BETWEEN 1 AND 3;",
      "category": "Relational Calculus"
    },
    {
      "label": "Row number by price",
      "sql": "SELECT fruit, ROW_NUMBER() OVER (ORDER BY retail_price DESC) AS row_num FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Rank within form by price",
      "sql": "SELECT fruit, RANK() OVER (PARTITION BY form ORDER BY retail_price DESC) AS form_rank FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Dense rank by cup-equiv price",
      "sql": "SELECT fruit, DENSE_RANK() OVER (ORDER BY cup_equiv_price ASC) AS dr FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Quartiles using NTILE(4)",
      "sql": "SELECT fruit, NTILE(4) OVER (ORDER BY retail_price) AS quartile FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Next price using LEAD",
      "sql": "SELECT fruit, LEAD(retail_price) OVER (ORDER BY retail_price) AS next_price FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Previous price using LAG",
      "sql": "SELECT fruit, LAG(retail_price) OVER (ORDER BY retail_price) AS prev_price FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "First value of price",
      "sql": "SELECT fruit, FIRST_VALUE(retail_price) OVER (ORDER BY fruit) AS first_price FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Last value of price",
      "sql": "SELECT fruit, LAST_VALUE(retail_price) OVER (ORDER BY fruit ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_price FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Count per form (window)",
      "sql": "SELECT fruit, COUNT(*) OVER (PARTITION BY form) AS count_per_form FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Overall avg price (window)",
      "sql": "SELECT AVG(retail_price) OVER () AS overall_avg FROM fruit_prices_2022;",
      "category": "Window Functions"
    },
    {
      "label": "Lowercase fruit names",
      "sql": "SELECT fruit, LOWER(fruit) AS lower_name FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    },
    {
      "label": "Uppercase fruit names",
      "sql": "SELECT fruit, UPPER(fruit) AS upper_name FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    },
    {
      "label": "Trim fruit names",
      "sql": "SELECT fruit, TRIM(fruit) AS trimmed_name FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    },
    {
      "label": "Length of fruit names",
      "sql": "SELECT fruit, LENGTH(fruit) AS name_length FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    },
    {
      "label": "Coalesce null prices to 0",
      "sql": "SELECT fruit, COALESCE(retail_price, 0) AS price_no_null FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    },
    {
      "label": "Retail price unit IS NOT NULL",
      "sql": "SELECT * FROM fruit_prices_2022 WHERE retail_price_unit IS NOT NULL;",
      "category": "String & Null Logic"
    },
    {
      "label": "Cast retail price to INTEGER",
      "sql": "SELECT fruit, CAST(retail_price AS INTEGER) AS price_int FROM fruit_prices_2022;",
      "category": "String & Null Logic"
    }
  ],
  "history": []
}

